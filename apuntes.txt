verbos de http:

get = solicitar datos o algun recurso.
head : traer headers, como una peticion Get, pero sin contenido.
post : enviar datos a un recurso para la creacion. 
put reemplazar por completo un recurso.
delete: eliminar un recurso.

codigos de estado son semanticos y indican en que parte ba la solicutd, si hay errores o hay que hacer algo mas
estados;
en centenas se dan los codigos:

1xx indica que la peticion fue recivida y el servidor esta traajando en el proceso.
2xx indica que la pericion fue recivida procesada y completada correctmente.
3xx indica que hay que tomar acciones a dicionales para completar la solicitud por lo general estos idnican codigos de redireccion. (en las apis, no es comun que se haga una redireccion)
4xx indica que solicitamos mal , que faltan datos headers, o cualquier otro error que pueda ocurrir.
5xx errores del servidor espesificamente, fallo completo de la ejecucion.
codigos mas usados:
200 = todo esta bien, se retorna cuando get esta correcto.
201 = estado que retorna una solicitud post, se hico correctamente, se creo y se guardo perfecto.
204 = se proceso correctamente pero no devuelve ninguna informacion, comunmente se ve cuando se hace un delete.
400 = bad request, se envio mal la solicutid, por le general este codigo trae devuelta lo que esta mal en la solicitud.
401 = un autorzied, que debemos autenticarnos con el servidor antes de hacer la solicitud.
403 = forviden, que no tenemos acceso asi estemos autenticados.
404 =  no existe el recurso. es muy famoso.
500 = es un internal server error, no pudo ser procesada y dio error.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

En un API es importante tener bien estructuradas las rutas por las cuales se usarán cada uno de los endpoints que contiene. Antes de entrar de lleno a explicar el API con el que trabajaremos en este curso veamos unos conceptos muy importantes a la hora de trabajar con APIs.

Recurso
Es la instancia o la representación de un objeto o la representación de algo, tiene datos y operaciones asociadas a él. Por ejemplo: course, material y video son recursos que tenemos disponibles en el API con la que trabajaremos y podemos realizar operaciones sobre ellos: crear, actualizar y eliminar.

Colecciones
Es un conjunto de recursos, por ejemplo: courses es una colección de course.

URL
(Uniform Resource Locator) es la ruta en la cual puede ser ubicado un recurso y ejecutar las operaciones sobre él.

CRUD
Siglas que hacen referencia a las operaciones básicas que se pueden ejecutar sobre un recurso:

C: Create (crear)
R: Read (leer)
U: Update (actualizar)
D: Delete (eliminar)
Endpoints
Es el punto final de la comunicación con un ente, en este caso, un endpoint está asociado a una URL y a las operaciones que podemos ejecutar. Este término es muy utilizado en las APIs.

Los endpoint definen operaciones que se quieren ejecutar sobre un recurso. Por ejemplo: si queremos un conjunto de operaciones CRUD sobre Cursos podríamos crear los siguientes endpoints:

/get-all-courses : para obtener una colección de Cursos.
/add-new-course: para crear un nuevo recurso de Cursos.
/delete-all-courses: para eliminar todos los Cursos.
Y así sucesivamente. Pero, esto implicaría un problema. El API puede llenarse de endpoints que ejecutan una sola operación, esto no es escalable, significa que si por ejemplo el recurso Cursos pasa a llamarse Clases habría que actualizar absolutamente todas las URLs y asegurarse de ello puede convertirse en un dolor de cabeza.

Entonces, ¿cuál es la buena práctica en este caso?

Como lo vimos en la clase pasada, el protocolo HTTP especifica una serie de verbos que indican acciones. Lo ideal es que la operación que se ejecute sobre un recurso se obtenga a través del verbo HTTP de la petición y no que esté definido en el endpoint. Por ejemplo:

/courses: Dependiendo del verbo HTTP se ejecutará una operación en particular. Quedaría así:
GET /courses: trae la colección de Cursos.
POST /courses: crea un nuevo recurso de Cursos.
DELETE /courses: elimina todos los cursos.
De esta manera queda mucho más organizado un API. Pero, qué pasa si queremos traer no una colección de cursos como en los casos anteriores, sino un recurso en específico.

Por lo general cada recurso tiene un identificador único, un ID, es con esto que llamaremos a un endpoint para que nos retorne la información del recurso. Por ejemplo:

GET /courses/2/: vemos que acá se le está pasando algo que en los endpoints anteriores no veíamos, es el número 2, ese es el identificador único, de esta manera el API sabe que tiene que buscar el curso con ID 2 y retornarlo.
Así sucesivamente con cada uno de los verbos, por ejemplo: casi nunca se hace una eliminación en masa en un API, como el ejemplo que tenemos más arriba donde se eliminan todos los cursos. Lo ideal es que se elimine un recurso individualmente y no una colección, igualmente pasa con la actualización.

Recursos anidados
Hay veces en las que un recurso depende de otro recurso, por ejemplo, comentarios depende de materiales; usualmente en los APIs las anidaciones se hacen hasta dos niveles, es decir:

materials/1/comments: estos son dos niveles
materials/1/comments/2/answers/: son tres niveles, ahí lo ideal sería entonces separar el endpoint de comentarios y ejecutar comments/2/answers/
Nuestro API
Ya he dado algunos spoilers sobre lo que nuestro API hace, es un clon de lo que Platzi es, una plataforma es donde tenemos Cursos, Materiales, Videos y Comentarios. El API es sencillo y es una prueba que utilizamos en este curso para explorar toda las capacidades que nos ofrece Postman para trabajar con ellos.

Una convención que se usa a la hora de documentar APIs es abstraer el endpoint de la URL del sitio al cual vamos a hacer la petición, puesto que esto al final es redundante de escribir, es decir, usualmente escribimos únicamente /api-token-auth/ en vez de [http://mistioweb.com/api-token-auth/](http://mistioweb.com/api-token-auth/).

Los endpoints que tenemos:
/api-token-auth/
/courses
/courses/:id/
/courses/:id/upload_badge/
/materials/
/materials/:id/
/materials/:id/comments/
/comments/
/comments/:id/
/comments/:id/like/
/comments/:id/dislike/

Tu avatar
Escribe tu aporte o pregunta
APORTES 96

PREGUNTAS 1

Ordenar por:
Más Votados
Nuevos
Sin Responder
R0Y3R
R0Y3R

Hace 10 meses

30
En el curso de django avanzado hay una clase especial donde hablan sobre las mejores practicas https://platzi.com/clases/1461-django-avanzado/17199-buenas-practicas-para-el-diseno-de-un-api-rest/
Sin embargo yo les resumiré un poco:

Crea la api siempre pensando en quien la va a consumir (Frontend dev and mobile dev)
Versiona tu api (api.youapp.com/v1/materials/)
No juntes tu api con demas servicios de backend (usa un subdominio api.yourapp.com)
Usa las variables GET para filtrado (api.yourapp.com/v1/users/?created=13/08/2020&state=1)
Evita cosas como (api.yourapp.com/v1/user/create) usa los verbos HTTP
Ver más
Responder
Wilder Winslao Trujillo Meza
Wilder Winslao Trujillo Meza

Hace 10 meses

1
Genial! gracias por el dato

Bernardo Aguayo Ortega
Bernardo Aguayo Ortega

Hace 10 meses

1
